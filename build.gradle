apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.google.cloud.tools.jib"

// 扩展定义
ext {
    // 启动类
    MainClass = 'com.changhong.sei.apigateway.WebApplication'
}

group = GROUP
version = VERSION
description = DESCRIPTION
// JVM 版本号要求
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://rddgit.changhong.com/nexus/repository/SEI_Group/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.1.0")
    }
}

repositories {
    mavenLocal()
    maven { url 'http://rddgit.changhong.com/nexus/repository/SEI_Group/' }
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    implementation('org.springframework.cloud:spring-cloud-starter-gateway')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    implementation('org.hibernate:hibernate-validator:5.2.4.Final') {
        force = true
    }

    implementation("com.changhong.sei:sei-cloud-starter:$sei_version")

    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

configurations {
    //在整个构建过程中排除org.hibernate.validator:hibernate-validator
    all*.exclude group: 'org.hibernate.validator', module: 'hibernate-validator'
    all*.exclude group: 'com.changhong.sei', module: 'sei-core-monitor'
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.1.0"
    }
}

//打ar包
bootJar  {
    enabled = true
    archiveFileName = "${rootProject.name}.${archiveExtension.get()}"
    mainClassName = MainClass
    manifest {
        attributes("Manifest-Version": "6.0")
        attributes("Created-By": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString())
        attributes("Implementation-Title": "$project.name")
        attributes("Implementation-Version": "$project.version")
        attributes("Implementation-Vendor": "rcsit.cn")
        attributes("Build-Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
    }
}

// 处理资源配置文件
processResources {
    // 替换bootstrap.yaml文件中@project_version@占位符的值
    filesMatching('bootstrap.yaml') {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                project_name       : project.property('name'),
                project_version    : project.property('version'),
                project_description: project.property('description')
        ]
    }
    // 默认application文件中的配置从配置中心获取
    excludes = ["**/application.yaml", "**/application.properties"]
}

jib {
    // 拉取的镜像的配置
    from {
        image = 'java:8-jdk-alpine'
    }
    // 要生成的镜像的配置
    to {
        image = "$docker_registry_url/$docker_registry_namespace/$rootProject.name"
        tags = ["${project.version}".toString(), 'latest']

        auth {
            username = "${docker_registry_username}"
            password = "${docker_registry_password}"
        }
    }
    container {
        // 容器创建时间用
        creationTime = 'USE_CURRENT_TIMESTAMP'
        // jvmFlgs: JVM 容器的参数，和 Dockerfile 的 ENTRYPOINT作用相同
        jvmFlags = [
                '-Djava.security.egd=file:/dev/./urandom',
                '-Dfile.encoding=utf-8',
                '-Duser.timezone=GMT+08',
                '-server',
                '-Xms1024m',
                '-Xmx2048m'
        ]
        // 启动类限定名
        mainClass = MainClass
        // 容器暴露的端口，和 Dockerfile 的EXPOSE作用相同
        ports = ['8080']
    }
    // 如果私有镜像仓库没有启用https，设置allowInsecureRegistries参数为true
    allowInsecureRegistries = true
}
