apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.google.cloud.tools.jib"

// 扩展定义
ext {
    // 启动类
    MainClass = 'com.changhong.sei.apigateway.WebApplication'
}


// JVM 版本号要求
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://rddgit.changhong.com/nexus/repository/SEI_Group/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.1.0")
    }
}

repositories {
    mavenLocal()
    maven { url 'http://rddgit.changhong.com/nexus/repository/SEI_Group/' }
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    implementation('org.springframework.cloud:spring-cloud-starter-gateway')
    implementation("org.springframework.cloud:spring-cloud-starter-zookeeper-discovery")
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    implementation(
            "org.hibernate:hibernate-java8:5.3.7.Final",
            "mysql:mysql-connector-java:$mysqlVersion"
    )

    implementation("com.changhong.sei:sei-cloud-starter:$sei_version") {
        // 排除 web
        exclude group: 'com.changhong.sei', module: 'sei-core-monitor'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
    }

    compileOnly  "org.projectlombok:lombok:1.18.4"
    annotationProcessor  "org.projectlombok:lombok:1.18.4"

    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.1.0"
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.changhong.sei.apigateway.WebApplication'
    }
}

jib {
    // 拉取的镜像的配置
    from {
        image = 'java:8-jdk-alpine'
    }
    // 要生成的镜像的配置
    to {
        image = "$docker_registry_url/$docker_registry_namespace/$rootProject.name"
        tags = ["${project.version}".toString(), 'latest']

        auth {
            username = "${docker_registry_username}"
            password = "${docker_registry_password}"
        }
    }
    container {
        // 容器创建时间用
        creationTime = 'USE_CURRENT_TIMESTAMP'
        // jvmFlgs: JVM 容器的参数，和 Dockerfile 的 ENTRYPOINT作用相同
        jvmFlags = [
                '-Djava.security.egd=file:/dev/./urandom',
                '-Dfile.encoding=utf-8',
                '-Duser.timezone=GMT+08'
        ]
        // jvmFlags = ['-Xms512m', '-Xdebug', '-Xmy:flag=jib-rules']
        // 启动类限定名
        mainClass = MainClass
        // 容器暴露的端口，和 Dockerfile 的EXPOSE作用相同
        ports = ['8080']
    }
    // 如果私有镜像仓库没有启用https，设置allowInsecureRegistries参数为true
    allowInsecureRegistries = true
}
